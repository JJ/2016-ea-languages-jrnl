\documentclass[runningheads,a4paper]{llncs}

\usepackage[utf8]{inputenc}
\usepackage{hyperref}
\usepackage{amssymb}
\usepackage{amsmath}
\setcounter{tocdepth}{3}
\usepackage{graphicx}
\usepackage{multirow}
\usepackage{rotating}
\usepackage{subfigure}

\begin{document}

<<setup, cache=FALSE,echo=FALSE>>=
library("ggplot2")
measures.bf <- read.csv('measures-bitflip.csv')
measures.xo <- read.csv('measures-xover.csv')
measures.mo <- read.csv('measures-maxones.csv')
@ 

\title{Benchmarking languages for evolutionary algorithms}
\titlerunning{Benchmarking EAs}

\author{A. U. Thor}
\institute{Midgardian Polytechnic}

\maketitle

\begin{abstract}
  When implementing an evolutionary algorithm, speed is not
  everything; besides, the speed of different languages when carrying
  out an operation will depend on several measures, including the size
  of the operator. However it is usual to rely on compiled languages,
  namely Java and C/C++, for carrying out any implementation without
  considering other languages or rejecting them outright on the basis
  of speed. Since there are a miriad of languages nowadays, it
  is interesting to find out their speed when performing operations that
  are usual in evolutionary algorithm. That is why in this paper we have chosen
  three evolutionary algorithm operations: bitflip mutation, crossover
  and the fitness function OneMax and measured the speed for several
  popular, and some not so popular, languages. Our measures confirm
  that, in fact, Java, C and C++ not only are the fastest, but also
  have a behaviour that is independent on the size of the
  chromosome. However, we have found other compiled language such as
  Go or interpreted languages such as Python to be fast enough for
  most purposes. 
\end{abstract}

\section{Introduction}

It is usual in soft computing to try and use languages such as C++ or
Java with the rationale that they are the fastest tools available for
the kind of algorithms and problems that are solved by them. However,
while there are benchmarks available for the languages at large and
they have been tested in a variety of environments, it remains to be
seen how fast are these languages at the tasks that are done usually
by evolutionary algorithms. 

Let us enphasize that running speed is not everything. I many cases,
ease of integration with existing or legacy tools, coding speed or
availability of parallel or distributed frameworks are much more
important than how fast a single CPU program runs. However, in some
case, mainly when the size of the problem or the running time of the
algorithm call for the maximum running speed available, it is
interesting at least to know which languages can be used to obtain the
best performance. 

In this case it is quite clear that efficiency matters, as said in
 \cite{anderson2010efficiency}. And, as a matter of fact, in general and restricting the concept
 of {\em speed} to {\em speed of 
  the compiled/interpreted application} it might be the case that some
languages are faster to others, as evidenced by benhmarks such as
\cite{prechelt2000empirical,fulghamcomputer}. Taken in general or even
restricting it to some particular set of problems such as floating
point computation, some compiled languages tend to be faster than
interpreted languages.

But, in the same spirit of the {\em There is no free lunch} theorem
\cite{Wolpert-1997-NFL} we can affirm there is a {\em no fast lunch}
theorem for the implementation of evolutionary optimization, in the
sense that, while there are particular languages that might be the
fastest for particular problem sizes and specially fitness functions,
these two constraints cannot be disregarded, and,
specially, for non-trivial problem sizes and limiting ourselves to the
realm of evolutionary algorithm operators, some interpreted and
unpopular languages such as {\tt awk} can be the fastest option
available for evolving particular data structures such as regular
expressions \cite{awk}. Besides, benchmarks should include a wide variety
of sizes, since the implementation of loops and memory management
might make the time needed to perform particular operations not depend
linearly on sizes.

For the purposes of this paper, we will try to be more extensive on
the number of languages tested than on the number of operations. In
general, evolutionary algorithms use fitness functions that can have
any size and shape, so it is not easy to cover them all and further
characterization might be needed. We are going to focus on
combinatorial optimization problems, which are usually represented
using bit strings and the two most characteristics operators: mutation
and crossover. Besides, a fitness function usually employed as a
baseline for evolutionary algorithms will be used: OneMax. 

In general, programs do not spend the majority of the time applying
them; this post in the ranking rather goes to selection operators and
other higher-level, population-handling ones, as well as usually the
fitness function. However, these functions are well covered by usual
benchmarks so you can usually rely on any of them for choosing a
language to implement your evolutionary algorithm. This makes the
scope or interest of this paper certainly restricted to the set of
problems in which classical bit-wise operations are performed and
where fitness does not take most of the time: Testing new operators or
implementing parallel or other kind of algorithms on functions such as
HIFF, OneMax or Royal Road. 

Finally, our intention is not so much to choose the winner of the
competition of fastest language for evolutionary algorithms as much as
to check the variety of speeds available and to know what order of
magnitude these differences are. This will can be used to aid in the
decision of choosing a language for implementing an evolutionary
algorithm, or at least to justify the choice of non-mainstream
languages such as Python, Lua, Javascript or Go, which, in fact, do
reach interesting performance marks. 

Coming up next, we will present the state of the art of the analysis
of implementations of evolutionary algorithms. Next we will present
the test we have used for this paper and its rationale, and finally we
will present the results of examining four different languages running
the most widely used evolutionary algorithm operator:
mutation. Finally, we will draw the conclusions and present future
lines of work. 

\section{State of the art}

In fact, the examination of the running time of an evolutionary
algorithm has received some attention from early on. Implementation
matters \cite{DBLP:conf/iwann/MereloRACML11,nesmachnow2011time}, which implies that
paying attention to the particular way an algorithm is implemented
might result in speed improvements that outclass those achieved by 
using the {\em a priori} fastest language available. In fact, careful
coding and choosing the right tools  \cite{ae09,1515367} in
interpreted languages can make them as fast, or even faster, than
compiled languages such as Java. 

However, most papers devoted to the implementation of evolutionary
algorithms in languages other than C or Java try to prove that, for
the particular type of problems used in scientific computing in general, the running speed is not as important
as coding speed or even learning speed, since most scientific programs
are, in fact, run a few times while a lot of time is spent on coding
them. That is why expressive languages such as Perl, JavaScript or
Python are, in many cases, superior to these fast-to-run
languages. 

Even so and when speed matters, the benchmarks performed in those papers were restricted to
particular problem sizes and to very specific languages. They also
test a single language for the whole evolutionary algorithm; however,
it might happen that, since different operations are involved, the
ranking varies depending on the operation and on the size. This, in an
environment such as the Kappa architecture \cite{KappaArch} or
web-services based frameworks \cite{garcia2010distributed,DBLP:journals/soco/Garcia-SanchezGCAG13} where
different parts of an application might be written in different
languages and loosely connected, might make the particular speed in
particular languages an issue so that they are used to implement
particular operations, as opposed to monolythic architectures written
in a single language. 

Next we will explain the operations used for the benchmark and how
they have been tested. 

\section{Experimental setup}

First, a particular problem was chosen for testing different
languages and also data representations: performing bit-flip mutation
on a binary string. In fact, this is not usually the part of the
program an evolutionary algorithm spends the most time in
\cite{nesmachnow2011time}. In general, that is the fitness function,
and then reproduction-related functions: chromosome ranking, for
instance. However, mutation is the operation that is performed the
%Mario: Yo creo que este operador de mutaci칩n no es el que m치s se realiza 
%ya que su aplicaci칩n tiene una probabilidad.
%Bueno, quiz치s menos que crossover. Para el siguiente paper...
most times on every evolutionary algorithm and is quintessential to
the algorithm itself, so it allows the comparison of the different
languages in the proper context. In this section we will outline first
the specifics of the implementation and the rationale behind them in
subsection \ref{ss:operators}, to proceed to outline the different
data structures that have been used here in subsection \ref{ss:ds} to
finally present the different languages that have been tested and the
peculiarities of its implementation \ref{ss:lang}. 

\subsection{Functions included in the benchmark}
\label{ss:operators}

Essentially, mutation is performed by \begin{enumerate}

\item Generating a random integer from 0 to the length of the chromosome. %Pablo: Generating
\item Choosing the bit in that position and flipping it
\item Building a chromosome with the value of that bit changed.

\end{enumerate}

\subsection{Available data structures}
\label{ss:ds}

Chromosomes can be represented in at several different ways: an
array or vector of boolean values, or any other scalar value that can
be assimilated to it, or as a bitstring using generally ``1'' for true
values or ``0'' for false values. Different data structures will have
an impact on the result, since the operations that are applied to them
are, in many cases, completely different and thus the underlying
implementation is more or less efficient. Besides, languages use
different native data structures to represent this information. In
general, it can be divided into three different fields:\begin{itemize}
\item {\em Strings}: representing a set bit by 1 and unset by 0, it is
  a data structure present in all languages and simple to use in
  most.
\item {\em Vector of Boolean values}: not all languages have a
  specific primitive type for the Boolean false and true values; for
  those who have, sometimes they have specific implementations that
  make this data structure the most efficient.
\item {\em Bitsets}: bits are bits, and you can simply use bits packed
  into bytes for representing chromosomes, with 32 bits packed in a
  single 4 byte data structure. Memory-wise the most efficient,
  without low-level access operators it can indeed be the slowest, and
  in any case not too efficient for decoding to function parameters. 
\end{itemize}


\subsection{Languages tested}
\label{ss:lang}

Then, eleven %taking PHP into account
languages have been chosen for performing the
benchmark. The primary reason for chosing these languages was the
availability of open source implementations for the authors, but also
they represent different philosophies in language design. These
languages are presented in the next two subsections. 

\begin{table}[htb]
    \centering
    \begin{tabular}{l|c|l|l}
      \hline
      Language & Version & URL & Data structures \\
      \hline
      Scala & 2.11.7 & URL & String, Bit Vector \\
      Lua & 5.2.3 & URL & String \\
      Perl & v5.20.0 & URL & String, Bit Vector \\
      JavaScript & node.js 5.0.0 & URL & String \\ 
      Python & 2.7.3 & URL & String\\ 
      Go & go1.2.1 & URL & Bit Vector \\
      Julia & 0.2.1 & URL & Bit Vector \\
      C & 4.8.2 & URL & char string \\
%     C & 4.8.2 & http://git.io/v8kvU
%      C++ & 4.8.4 & \url{http://git.io/v8T57} \\
      C++ & 4.8.4 & URL & String  \\
%      Java & 1.7.0_45 & \url{http://git.io/v8TdR} \\
      Java & 1.8.0\_66 & URL & Bitset \\
%      PHP & 5.5.9 & \url{http://git.io/v8k9g} & String \\ % vrivas, 5-nov-2015
      PHP & 5.5.9 & URL & String \\ % vrivas, 5-nov-2015
      \hline 
      \end{tabular}
      \caption{Languages used and file written to carry out the
        benchmark. No special flags were used for the interpreter or
        compiler. URLs have been hidden for double-blind revision \label{tab:files}}
    \end{table}
%    
    
    \subsection{Compiled languages}
    \label{ss}
Compiled languages are represented by Scala, Java, Go, C and C++.

Scala \cite{odersky2004overview} is a strongly-typed 
functional language that compiles to a Java Virtual Machine 
bytecode. Scala is in many cases faster than Java
\cite{fulghamcomputer} due to its more efficient
implementation of type handling. Two different representations were
used in Scala: {\tt String} and {\tt Vector[Boolean]}. They both have
the same underlying type, {\tt IndexedSeq} and in fact the overloading
of operators allows us to use the same syntax independently of the
type. The benchmark, {\tt bitflip.scala}, is available under a GPL
license, at the URL shown in Table \ref{tab:files}. As far as we know,
there are no published evolutionary algorithm frameworks published in
Scala; however, its increasing popularity within the programmer, and,
over all, big data community makes it quite likely to find one in the
near figure. 

Interpreted languages are represented by Lua, PHP. Perl and Javascript. Lua and PHP
are popular embedded languages designed for easy
implementation; Perl has been used extensively for evolutionary
algorithms \cite{ae09,merelo14:noisy,DBLP:conf/cec/GuervosMCCV13} with
satisfactory results, and node.js, an implementation of JavaScript,
which uses a the V8 JIT compiler to create bytecode when in reads the
script, and 
% Mario: and node.js, a JavaScript framework
% la implementaci칩n que usa es Google V8. 
% Seg칰n: https://developers.google.com/v8/design
% V8 compiles JavaScript source code directly into machine code when it is first executed.   
has been used lately by our research group as part of our NodEO
library \cite{DBLP:conf/gecco/GuervosVGES14} and volunteer computing
framework NodIO \cite{DBLP:journals/corr/GuervosG15}. In fact, this 
paper is in part a rebuttal to concerns made by reviewers of the lack of %Mario: No eran claims eran concerns :)
speed and thereof adequacy of JavaScript for evolutionary algorithm
% Pablo: est치 bien decir esto? :P JJ: Lo estamos haciendo...
experimentation. Versions and files are shown in the Table
\ref{tab:files}. Only Perl used two data structures as in Scala: a
string, which is a scalar structure in Perl, and an array of
booleans. 

In all cases except in Scala, implementation took less than one hour and was
inspired by the initial implementation made in Perl. Adequate data and control
structures were used for running the application, which applies
mutation to a single generated chromosome a hundred thousand
times. The length of the mutated string starts at 16 and is doubled
until reaching $2^15$, that is, 32768. This upper length was chosen to
have an ample range, but also so small as to be able to run the
benchmarks within one hour. Results are shown next.


\section{Results and analysis}
\label{sec:res}

\begin{figure}[h!tb]
  \centering
<<results-bf, cache=FALSE,echo=FALSE>>=
ggplot(measures.bf,aes(x=length,y=time,colour=factor(languagerepresentation)))+ geom_line() + geom_point() +  ggtitle("Evolutionary algorithm language benchmarks: Bitflip")+scale_y_log10()+scale_x_log10()
@ 
\caption{Plot of time needed to perform 100K mutations in strings with
lengths increasing by a factor of two from 16 to $2^{15}$. Please note
that $x$ and $y$ both have a logarithmic scale.}
\label{fig:time}
\end{figure}
%
\begin{figure}[h!tb]
  \centering
<<results-xo, cache=FALSE,echo=FALSE>>=
ggplot(measures.xo,aes(x=length,y=time,colour=factor(languagerepresentation)))+ geom_line() + geom_point() +  ggtitle("Evolutionary algorithm language benchmarks: Crossover")+scale_y_log10()+scale_x_log10()
@ 
\caption{Plot of time needed to perform 100K crossover operations in strings with
lengths increasing by a factor of two from 16 to $2^{15}$. Please note
that $x$ and $y$ both have a logarithmic scale.}
\label{fig:time:xo}
\end{figure}
%
\begin{figure}[h!tb]
  \centering
<<results-mo, cache=FALSE,echo=FALSE>>=
ggplot(measures.mo,aes(x=length,y=time,colour=factor(languagerepresentation)))+ geom_line() + geom_point() +  ggtitle("Evolutionary algorithm language benchmarks: Onemax")+scale_y_log10()+scale_x_log10()
@ 
\caption{Plot of time needed to perform 100K OneMax evaluations in strings with
lengths increasing by a factor of two from 16 to $2^{15}$. Please note
that $x$ and $y$ both have a logarithmic scale.}
\label{fig:time:mo}
\end{figure}

All measurements and processing scripts are included in this paper
repository, although in fact the programs were written to directly
produce a CSV (comma separated value) representation of measurements,
which was then plotted using R and {\tt ggplot} as shown in Figure
\ref{fig:time}. The first unexpected behavior shown here is the
remarkable speed of the Lua language, which is, in fact, faster
than any other small sizes, although slower than Python at bigger
sizes. After these two, next position goes to node.js, which uses a very
efficient implementation of a Just-in-Time interpreter for the %Mario: Si se us칩 V8 es un compilador 
% Es un int칠rprete, porque se lee cada vez del fuente. - jj
JavaScript language. Then Perl, with a bitstring representation being
slightly better than bit vectors, although the difference dilutes with
time, and eventually Scala, with a bitstring actually faster than
using bit vectors. In fact, Scala is a bit better than Perl for the
smallest sizes, less than 128 bits and if a string representation is
used, but that advantage disappears for greater sizes. 

The behavior of the languages is not linear either. Node.js and Python
both have an
interesting feature: its speed is roughly independent of the string
size up to size 1024. The same happens also for several size
segments for Lua, showing some plateaus that eventually break for the
bigger sizes. It probably means that the creation and accessing of strings is
done in constant time, or is roughly constant, giving it a performance
advantage over other languages. Even so, it never manages to beat the
fastest language in this context, which is either Lua or Python,
depending on the size. 

The trend from size 1024 on is for the differences to keep in more or less the same   
style for bigger sizes, so we do not think it would be interesting to
extend it to $2^16$ and upwards. In any case, these measures allow us %Pablo: confirmado en WR, In any.
to measure the performance of the most widely used genetic operator in
four different and popular languages, since all four of them (except
for Lua) show up in most rankings of the most popular languages, such
as the Tiobe ranking \cite{tiobe15}. 


\section{Conclusions}

In this paper we set out to measure the speed of different languages
when running the classical evolutionary algorithm operation: mutating
a chromosome represented as a binary string or vector. The results
can be a factor on the choice of a language for implementing solution
to problems using evolutionary algorithms, at least if raw running
speed is the main consideration. And, if that is our main concern, the
fastest language for mutating strings has been found to be Lua and Python,
followed by node.js and Perl. All interpreted languages are faster for the
wider range of chromosome sizes than Scala, which is a compiled
language that uses the Java Virtual machine. 

However, Lua is not exactly a popular language, although it definitely
has found its niche in embedded systems such as in-game scripting,
game development or servers so %Pablo: game development
our choice for EA programming languages would be Python or JavaScript,
which are fast enough, popular, allow for fast development and have a
great and thriving community. JavaScript does have an advantage over
Python: Beside being interpreted languages and using
dynamic typing, it can express complex operations in a terse syntax
and bestows implementations both in browsers and on the
server. We can conclude from these facts and the measurements made in
this paper that JavaScript is perfectly adequate for any scientific
computing task, including evolutionary algorithms.

That does not mean that Perl, Lua or even Scala are not adequate for
scientific computing. However, they
might not be if experiments take a long time and time is of the
essence; in that case implementing the critical parts of the program
using C, Go, Lua or Python might be the right way to go. But in general, it
cannot be said that interpreted languages are not an adequate platform
for implementing evolutionary algorithms, as proved in this paper. %Pablo: esto s칤 mola ponerlo

Future lines of work might include a more extensive measurement of
other operators such as crossover, tournament selection and other
selection algorithms. However, they are essentially CPU integer
operations and their behavior might be, in principle, very similar to %Pablo: arriba behaviour estaba en americano
the one shown here. This remains to be proved, however, but it is left
as future line of work. 


\section{Acknowledgements}

%% This paper is part of the open science effort at the university of
%% Granada. It has been written using {\tt knitr}, and its source as well as
%% the data used to create it can be downloaded from
%% \href{https://github.com/geneura-papers/2015-ea-languages}{the GitHub
%%   repository}. It has been supported in part by  
%% \href{http://geneura.wordpress.com}{GeNeura Team}. 

%% This work has been supported in part SPIP2014-01437 (Direcci\'on General
%% de Tr\'afico), PRY142/14 (Fundaci\'on P\'ublica Andaluza Centro de
%% Estudios Andaluces en la IX Convocatoria de Proyectos de
%% Investigaci\'on), TIN2014-56494-C4-3-P (Spanish Ministry of Economy
%% and Competitivity), and PYR-2014-17 GENIL project (CEI-BIOTIC
%% Granada).  
  

\bibliographystyle{splncs}
\bibliography{geneura,languages,GA-general}

\end{document}
%%% Local Variables:
%%% ispell-local-dictionary: "english"
%%% hunspell-local-dictionary: "english"
%%% End:% 
